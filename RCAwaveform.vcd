$date
	Tue Jul 01 02:40:44 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_RippleCarry8bit $end
$var wire 8 ! sum [7:0] $end
$var wire 1 " cout $end
$var reg 8 # a [7:0] $end
$var reg 8 $ b [7:0] $end
$var reg 1 % cin $end
$scope module uut $end
$var wire 8 & a [7:0] $end
$var wire 8 ' b [7:0] $end
$var wire 1 % cin $end
$var wire 8 ( sum [7:0] $end
$var wire 1 " cout $end
$var wire 1 ) connect $end
$scope module instance1 $end
$var wire 4 * a [3:0] $end
$var wire 4 + b [3:0] $end
$var wire 1 % cin $end
$var wire 4 , sum [3:0] $end
$var wire 1 ) cout $end
$var wire 1 - connect3 $end
$var wire 1 . connect2 $end
$var wire 1 / connect1 $end
$scope module instance1 $end
$var wire 1 0 a $end
$var wire 1 1 b $end
$var wire 1 % cin $end
$var wire 1 / cout $end
$var wire 1 2 sum $end
$upscope $end
$scope module instance2 $end
$var wire 1 3 a $end
$var wire 1 4 b $end
$var wire 1 / cin $end
$var wire 1 . cout $end
$var wire 1 5 sum $end
$upscope $end
$scope module instance3 $end
$var wire 1 6 a $end
$var wire 1 7 b $end
$var wire 1 . cin $end
$var wire 1 - cout $end
$var wire 1 8 sum $end
$upscope $end
$scope module instance4 $end
$var wire 1 9 a $end
$var wire 1 : b $end
$var wire 1 - cin $end
$var wire 1 ) cout $end
$var wire 1 ; sum $end
$upscope $end
$upscope $end
$scope module instance2 $end
$var wire 4 < a [3:0] $end
$var wire 4 = b [3:0] $end
$var wire 1 ) cin $end
$var wire 4 > sum [3:0] $end
$var wire 1 " cout $end
$var wire 1 ? connect3 $end
$var wire 1 @ connect2 $end
$var wire 1 A connect1 $end
$scope module instance1 $end
$var wire 1 B a $end
$var wire 1 C b $end
$var wire 1 ) cin $end
$var wire 1 A cout $end
$var wire 1 D sum $end
$upscope $end
$scope module instance2 $end
$var wire 1 E a $end
$var wire 1 F b $end
$var wire 1 A cin $end
$var wire 1 @ cout $end
$var wire 1 G sum $end
$upscope $end
$scope module instance3 $end
$var wire 1 H a $end
$var wire 1 I b $end
$var wire 1 @ cin $end
$var wire 1 ? cout $end
$var wire 1 J sum $end
$upscope $end
$scope module instance4 $end
$var wire 1 K a $end
$var wire 1 L b $end
$var wire 1 ? cin $end
$var wire 1 " cout $end
$var wire 1 M sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
b0 >
b0 =
b0 <
0;
0:
09
08
07
06
15
14
03
12
01
10
0/
0.
0-
b11 ,
b10 +
b1 *
0)
b11 (
b10 '
b1 &
0%
b10 $
b1 #
0"
b11 !
$end
#10000
1"
1?
1@
1A
1)
1-
1.
05
1/
02
08
b0 ,
0;
0D
0G
0J
b0 !
b0 (
b0 >
0M
11
04
13
16
19
1B
1E
1H
1K
b1 +
b1111 *
b1111 <
b1 $
b1 '
b11111111 #
b11111111 &
#20000
0.
0-
0)
0A
0@
0?
0"
0/
05
08
0;
0D
0G
0J
b0 >
0M
01
00
03
06
09
0B
0E
0H
0K
b1 !
b1 (
b1 ,
12
b0 +
b0 *
b0 <
1%
b0 $
b0 '
b0 #
b0 &
#30000
15
18
1;
1D
1G
1J
b1111 >
1M
11
14
17
1:
1B
1E
1H
1K
b11111111 !
b11111111 (
b1111 ,
12
b1111 +
b1111 <
0%
b1111 $
b1111 '
b11110000 #
b11110000 &
#40000
02
05
08
b0 ,
0;
0D
0G
0J
b0 !
b0 (
b0 >
0M
01
04
07
0:
0B
0E
0H
0K
b0 +
b0 <
b0 $
b0 '
b0 #
b0 &
#50000
1"
1L
1K
b1 !
b1 (
b1 ,
12
b1000 =
b1000 <
1%
b10000000 $
b10000000 '
b10000000 #
b10000000 &
#60000
